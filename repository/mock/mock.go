// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/manager.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ynuraddi/t-medods/model"
)

// MockISessionRepository is a mock of ISessionRepository interface.
type MockISessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISessionRepositoryMockRecorder
}

// MockISessionRepositoryMockRecorder is the mock recorder for MockISessionRepository.
type MockISessionRepositoryMockRecorder struct {
	mock *MockISessionRepository
}

// NewMockISessionRepository creates a new mock instance.
func NewMockISessionRepository(ctrl *gomock.Controller) *MockISessionRepository {
	mock := &MockISessionRepository{ctrl: ctrl}
	mock.recorder = &MockISessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionRepository) EXPECT() *MockISessionRepositoryMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockISessionRepository) CreateSession(ctx context.Context, sess model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, sess)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockISessionRepositoryMockRecorder) CreateSession(ctx, sess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockISessionRepository)(nil).CreateSession), ctx, sess)
}

// SessionByUser mocks base method.
func (m *MockISessionRepository) SessionByUser(ctx context.Context, userID string) (model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionByUser", ctx, userID)
	ret0, _ := ret[0].(model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionByUser indicates an expected call of SessionByUser.
func (mr *MockISessionRepositoryMockRecorder) SessionByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionByUser", reflect.TypeOf((*MockISessionRepository)(nil).SessionByUser), ctx, userID)
}
